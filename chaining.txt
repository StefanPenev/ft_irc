Client        Server                             User Object
  |              |                                     |
  | --- connect -> accept() -> clientid -------------> |
  |              |                                     |
  | <--- creates User(clientid) ---------------------> |
  |              |                                     |
  | --- send IRC command (e.g., NICK) -------------> recv()
  |              |                                     |
  |        append to recvBuffer[fd]                    |
  |              |                                     |
  |     detect \r\n and extract full line              |
  |              |                                     |
  | ----> CommandHandler::handleCommand(fd, line) ---- |
  |              |                                modifies user
  |              |                                append reply to sendBuffer
  |              |                                     |
  | <---- flushSendBuffer(fd) ------ send() -----------|
  |              |                                     |


| **Step**                       | **Handled By** | **Details**                                                      |
| ------------------------------ | -------------- | ---------------------------------------------------------------- |
| `recv()` from socket           | Team A         | Read raw bytes from client connection.                           |
| Append to `recvBuffer[fd]`     | Team A         | Accumulate data until `\r\n` is found.                           |
| Split into full IRC command(s) | Team A         | Supports handling of partial/multiple commands.                  |
| Call `handleCommand(fd, line)` | Team A         | Forward full line to protocol logic. **Chaining point here.**    |
| Parse command string           | Team B         | Break command into verb + parameters.                            |
| Execute command logic          | Team B         | Validate, update `User`/`Channel`, check permissions, etc.       |
| Format server reply            | Team B         | e.g., `:server 001 nick :Welcome to IRC`                         |
| Append to user’s send buffer   | Team B         | `User::getSendBuffer() += response`                              |
| `flushSendBuffer(fd)`          | Team A         | Sends pending data to the client.                                |

1.When a new client connects via accept(), we immediately create a User object 
and store it by its socket file descriptor (fd).

2.recv() Buffers Data Per Client As messages come in, we buffer them per client 
and look for complete lines ending in \r\n.

3.Command is Dispatched to Command Handler

I made a small change in the server code to allow testing with actual commands. 
Currently, the server only processes one message per client—this is just for testing 
purposes and to remove the hardcoded "KILL ALL HUMANS" response.

You are free to redesign or replace the run loop as needed when integrating your part. 
I’ve added comments highlighting the key chaining points between the server logic and 
your command handling:

Create a new User object when a client connects.

Check if the received buffer contains a complete line ending with \r\n.

Pass the complete line to the CommandHandler for parsing and execution.